diff --git a/ngx_http_upstream_check_module.c b/ngx_http_upstream_check_module.c
index b628436..0187f68 100644
--- a/ngx_http_upstream_check_module.c
+++ b/ngx_http_upstream_check_module.c
@@ -969,35 +1392,8 @@ ngx_http_upstream_check_add_timers(ngx_cycle_t *cycle)
     peer_shm = peers_shm->peers;
 
     for (i = 0; i < peers->peers.nelts; i++) {
-        peer[i].shm = &peer_shm[i];
-
-        peer[i].check_ev.handler = ngx_http_upstream_check_begin_handler;
-        peer[i].check_ev.log = cycle->log;
-        peer[i].check_ev.data = &peer[i];
-        peer[i].check_ev.timer_set = 0;
-
-        peer[i].check_timeout_ev.handler =
-            ngx_http_upstream_check_timeout_handler;
-        peer[i].check_timeout_ev.log = cycle->log;
-        peer[i].check_timeout_ev.data = &peer[i];
-        peer[i].check_timeout_ev.timer_set = 0;
 
         ucscf = peer[i].conf;
-        cf = ucscf->check_type_conf;
-
-        if (cf->need_pool) {
-            peer[i].pool = ngx_create_pool(ngx_pagesize, cycle->log);
-            if (peer[i].pool == NULL) {
-                return NGX_ERROR;
-            }
-        }
-
-        peer[i].send_handler = cf->send_handler;
-        peer[i].recv_handler = cf->recv_handler;
-
-        peer[i].init = cf->init;
-        peer[i].parse = cf->parse;
-        peer[i].reinit = cf->reinit;
 
         /*
          * We add a random start time here, since we don't want to trigger
@@ -1006,9 +1402,50 @@ ngx_http_upstream_check_add_timers(ngx_cycle_t *cycle)
         delay = ucscf->check_interval > 1000 ? ucscf->check_interval : 1000;
         t = ngx_random() % delay;
 
-        ngx_add_timer(&peer[i].check_ev, t);
+        peer[i].shm = &peer_shm[i];
+
+        ngx_http_upstream_check_add_timer(&peer[i], ucscf->check_type_conf, t, cycle->log);
+
+    }
+
+    return NGX_OK;
+}
+
+
+static ngx_int_t
+ngx_http_upstream_check_add_timer(ngx_http_upstream_check_peer_t *peer,
+    ngx_check_conf_t *check_conf, ngx_msec_t timer, ngx_log_t *log)
+{
+    peer->check_ev.handler = ngx_http_upstream_check_begin_handler;
+    peer->check_ev.log = log;
+    peer->check_ev.data = peer;
+    peer->check_ev.timer_set = 0;
+
+    peer->check_timeout_ev.handler =
+        ngx_http_upstream_check_timeout_handler;
+    peer->check_timeout_ev.log = log;
+    peer->check_timeout_ev.data = peer;
+    peer->check_timeout_ev.timer_set = 0;
+
+    if (check_conf->need_pool) {
+        peer->pool = ngx_create_pool(ngx_pagesize, log);
+        if (peer->pool == NULL) {
+            return NGX_ERROR;
+        }
     }
 
+    peer->send_handler = check_conf->send_handler;
+    peer->recv_handler = check_conf->recv_handler;
+
+    peer->init = check_conf->init;
+    peer->parse = check_conf->parse;
+    peer->reinit = check_conf->reinit;
+
+    ngx_add_timer(&peer->check_ev, timer);
+
+    /* TODO: lock */
+    peer->shm->ref++;
+
     return NGX_OK;
 }
 
@@ -1018,7 +1455,6 @@ ngx_http_upstream_check_begin_handler(ngx_event_t *event)
 {
     ngx_msec_t                           interval;
     ngx_http_upstream_check_peer_t      *peer;
-    ngx_http_upstream_check_peers_t     *peers;
     ngx_http_upstream_check_srv_conf_t  *ucscf;
     ngx_http_upstream_check_peers_shm_t *peers_shm;
 
@@ -1026,25 +1462,19 @@ ngx_http_upstream_check_begin_handler(ngx_event_t *event)
         return;
     }
 
-    peers = check_peers_ctx;
-    if (peers == NULL) {
-        return;
-    }
-
-    peers_shm = peers->peers_shm;
-    if (peers_shm == NULL) {
+    if (check_peers_ctx == NULL) {
         return;
     }
 
+    peers_shm = check_peers_ctx->peers_shm;
     peer = event->data;
     ucscf = peer->conf;
 
     ngx_add_timer(event, ucscf->check_interval / 2);
 
     /* This process is processing this peer now. */
-    if ((peer->shm->owner == ngx_pid  ||
-        (peer->pc.connection != NULL) ||
-        peer->check_timeout_ev.timer_set)) {
+    if (peer->shm->owner == ngx_pid ||
+        peer->check_timeout_ev.timer_set) {
         return;
     }
 
@@ -1319,6 +1749,10 @@ ngx_http_upstream_check_send_handler(ngx_event_t *event)
 
     ctx = peer->check_data;
 
+    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, c->log, 0,
+                   "http check send total: %z",
+                   ctx->send.last - ctx->send.pos);
+
     while (ctx->send.pos < ctx->send.last) {
 
         size = c->send(c, ctx->send.pos, ctx->send.last - ctx->send.pos);
@@ -1334,9 +1768,9 @@ ngx_http_upstream_check_send_handler(ngx_event_t *event)
         }
 #endif
 
-        if (size > 0) {
+        if (size >= 0) {
             ctx->send.pos += size;
-        } else if (size == 0 || size == NGX_AGAIN) {
+        } else if (size == NGX_AGAIN) {
             return;
         } else {
             c->error = 1;
@@ -1451,12 +1885,6 @@ ngx_http_upstream_check_recv_handler(ngx_event_t *event)
 
     case NGX_AGAIN:
         /* The peer has closed its half side of the connection. */
-        if (size == 0) {
-            ngx_http_upstream_check_status_update(peer, 0);
-            c->error = 1;
-            break;
-        }
-
         return;
 
     case NGX_ERROR:
@@ -2508,6 +2937,14 @@ ngx_http_upstream_check_status_update(ngx_http_upstream_check_peer_t *peer,
 
     ucscf = peer->conf;
 
+    ngx_shmtx_lock(&peer->shm->mutex);
+
+    if (peer->shm->delete == PEER_DELETED) {
+
+        ngx_shmtx_unlock(&peer->shm->mutex);
+        return;
+    }
+
     if (result) {
         peer->shm->rise_count++;
         peer->shm->fall_count = 0;
@@ -2529,6 +2966,8 @@ ngx_http_upstream_check_status_update(ngx_http_upstream_check_peer_t *peer,
     }
 
     peer->shm->access_time = ngx_current_msec;
+
+    ngx_shmtx_unlock(&peer->shm->mutex);
 }
 
 
@@ -2619,7 +3058,6 @@ static void
 ngx_http_upstream_check_clear_all_events()
 {
     ngx_uint_t                       i;
-    ngx_connection_t                *c;
     ngx_http_upstream_check_peer_t  *peer;
     ngx_http_upstream_check_peers_t *peers;
 
@@ -2638,26 +3076,45 @@ ngx_http_upstream_check_clear_all_events()
 
     peer = peers->peers.elts;
     for (i = 0; i < peers->peers.nelts; i++) {
-
-        if (peer[i].check_ev.timer_set) {
-            ngx_del_timer(&peer[i].check_ev);
+        if (peer[i].delete) {
+            continue;
         }
 
-        if (peer[i].check_timeout_ev.timer_set) {
-            ngx_del_timer(&peer[i].check_timeout_ev);
-        }
+        ngx_http_upstream_check_clear_peer(&peer[i]);
+    }
+}
 
-        c = peer[i].pc.connection;
-        if (c) {
-            ngx_close_connection(c);
-            peer[i].pc.connection = NULL;
-        }
 
-        if (peer[i].pool != NULL) {
-            ngx_destroy_pool(peer[i].pool);
-            peer[i].pool = NULL;
-        }
+static void
+ngx_http_upstream_check_clear_peer(ngx_http_upstream_check_peer_t  *peer)
+{
+    if (peer != peer->check_ev.data) {
+        ngx_log_error(NGX_LOG_CRIT, ngx_cycle->log, 0,
+                      "different peer: %p, data: %p, timer: %p",
+                      peer, peer->check_ev.data, &peer->check_ev);
+    }
+
+    if (peer->pc.connection) {
+        ngx_close_connection(peer->pc.connection);
+        peer->pc.connection = NULL;
+    }
+
+    if (peer->check_ev.timer_set) {
+        ngx_del_timer(&peer->check_ev);
+    }
+
+    if (peer->check_timeout_ev.timer_set) {
+        ngx_del_timer(&peer->check_timeout_ev);
+    }
+
+    if (peer->pool != NULL) {
+        ngx_destroy_pool(peer->pool);
+        peer->pool = NULL;
     }
+
+    ngx_memzero(peer, sizeof(ngx_http_upstream_check_peer_t));
+
+    peer->delete = 1;
 }
 
 
@@ -2695,7 +3152,9 @@ ngx_http_upstream_check_status_handler(ngx_http_request_t *r)
         ctx->format = uclcf->format;
     }
 
+    r->headers_out.content_type_len = ctx->format->content_type.len;
     r->headers_out.content_type = ctx->format->content_type;
+    r->headers_out.content_type_lowcase = NULL;
 
     if (r->method == NGX_HTTP_HEAD) {
         r->headers_out.status = NGX_HTTP_OK;
@@ -2832,8 +3291,13 @@ ngx_http_upstream_check_status_html_format(ngx_buf_t *b,
 
     count = 0;
 
+    /* TODO: two locks */
     for (i = 0; i < peers->peers.nelts; i++) {
 
+        if (peer[i].delete) {
+            continue;
+        }
+
         if (flag & NGX_CHECK_STATUS_DOWN) {
 
             if (!peer[i].shm->down) {
@@ -2876,6 +3340,10 @@ ngx_http_upstream_check_status_html_format(ngx_buf_t *b,
 
     for (i = 0; i < peers->peers.nelts; i++) {
 
+        if (peer[i].delete) {
+            continue;
+        }
+
         if (flag & NGX_CHECK_STATUS_DOWN) {
 
             if (!peer[i].shm->down) {
@@ -2928,6 +3396,10 @@ ngx_http_upstream_check_status_csv_format(ngx_buf_t *b,
     peer = peers->peers.elts;
     for (i = 0; i < peers->peers.nelts; i++) {
 
+        if (peer[i].delete) {
+            continue;
+        }
+
         if (flag & NGX_CHECK_STATUS_DOWN) {
 
             if (!peer[i].shm->down) {
@@ -2968,6 +3440,10 @@ ngx_http_upstream_check_status_json_format(ngx_buf_t *b,
 
     for (i = 0; i < peers->peers.nelts; i++) {
 
+        if (peer[i].delete) {
+            continue;
+        }
+
         if (flag & NGX_CHECK_STATUS_DOWN) {
 
             if (!peer[i].shm->down) {
@@ -2995,6 +3471,10 @@ ngx_http_upstream_check_status_json_format(ngx_buf_t *b,
     last = peers->peers.nelts - 1;
     for (i = 0; i < peers->peers.nelts; i++) {
 
+        if (peer[i].delete) {
+            continue;
+        }
+
         if (flag & NGX_CHECK_STATUS_DOWN) {
 
             if (!peer[i].shm->down) {
@@ -3067,8 +3547,9 @@ static char *
 ngx_http_upstream_check(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
 {
     ngx_str_t                           *value, s;
-    ngx_uint_t                           i, port, rise, fall, default_down;
+    ngx_uint_t                           i, port, rise, fall, default_down, unique;
     ngx_msec_t                           interval, timeout;
+    ngx_check_conf_t                    *check;
     ngx_http_upstream_check_srv_conf_t  *ucscf;
 
     /* default values */
@@ -3078,6 +3559,7 @@ ngx_http_upstream_check(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
     interval = 30000;
     timeout = 1000;
     default_down = 1;
+    unique = 0;
 
     value = cf->args->elts;
 
@@ -3181,6 +3663,25 @@ ngx_http_upstream_check(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
             continue;
         }
 
+        if (ngx_strncmp(value[i].data, "unique=", 7) == 0) {
+            s.len = value[i].len - 7;
+            s.data = value[i].data + 7;
+
+            if (ngx_strcasecmp(s.data, (u_char *) "true") == 0) {
+                unique = 1;
+            } else if (ngx_strcasecmp(s.data, (u_char *) "false") == 0) {
+                unique = 0;
+            } else {
+                ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
+                                   "invalid value \"%s\", "
+                                   "it must be \"true\" or \"false\"",
+                                   value[i].data);
+                return NGX_CONF_ERROR;
+            }
+
+            continue;
+        }
+
         goto invalid_check_parameter;
     }
 
@@ -3190,12 +3691,24 @@ ngx_http_upstream_check(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
     ucscf->fall_count = fall;
     ucscf->rise_count = rise;
     ucscf->default_down = default_down;
+    ucscf->unique = unique;
 
     if (ucscf->check_type_conf == NGX_CONF_UNSET_PTR) {
         ngx_str_set(&s, "tcp");
         ucscf->check_type_conf = ngx_http_get_check_type_conf(&s);
     }
 
+    check = ucscf->check_type_conf;
+
+    if (ucscf->send.len == 0) {
+        ucscf->send.data = check->default_send.data;
+        ucscf->send.len = check->default_send.len;
+    }
+
+    if (ucscf->code.status_alive == 0) {
+        ucscf->code.status_alive = check->default_status_alive;
+    }
+
     return NGX_CONF_OK;
 
 invalid_check_parameter:
@@ -3243,6 +3756,23 @@ ngx_http_upstream_check_http_send(ngx_conf_t *cf, ngx_command_t *cmd,
     ucscf = ngx_http_conf_get_module_srv_conf(cf,
                                               ngx_http_upstream_check_module);
 
+    if (ucscf->check_type_conf == NGX_CONF_UNSET_PTR) {
+        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
+                           "invalid check_http_send should set [check] first");
+        return NGX_CONF_ERROR;
+    }
+
+    if (value[1].len
+        && (ucscf->check_type_conf->name.len != 4
+            || ngx_strncmp(ucscf->check_type_conf->name.data,
+                           "http", 4) != 0))
+    {
+        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
+                           "invalid check_http_send for type \"%V\"",
+                           &ucscf->check_type_conf->name);
+        return NGX_CONF_ERROR;
+    }
+
     ucscf->send = value[1];
 
     return NGX_CONF_OK;
@@ -3292,7 +3822,7 @@ ngx_http_upstream_check_http_expect_alive(ngx_conf_t *cf, ngx_command_t *cmd,
 
     ucscf = ngx_http_conf_get_module_srv_conf(cf,
                                               ngx_http_upstream_check_module);
-    bit = ucscf->code.status_alive;
+    bit = 0;
 
     for (i = 1; i < cf->args->nelts; i++) {
         for (m = 0; mask[m].name.len != 0; m++) {
@@ -3425,11 +3955,21 @@ ngx_http_upstream_check_create_main_conf(ngx_conf_t *cf)
 
     ucmcf->peers->checksum = 0;
 
-    if (ngx_array_init(&ucmcf->peers->peers, cf->pool, 16,
+#if (NGX_DEBUG)
+
+    if (ngx_array_init(&ucmcf->peers->peers, cf->pool, 1,
+                       sizeof(ngx_http_upstream_check_peer_t)) != NGX_OK)
+    {
+        return NULL;
+    }
+
+#else
+    if (ngx_array_init(&ucmcf->peers->peers, cf->pool, 1024,
                        sizeof(ngx_http_upstream_check_peer_t)) != NGX_OK)
     {
         return NULL;
     }
+#endif
 
     return ucmcf;
 }
@@ -3571,6 +4111,9 @@ ngx_http_upstream_check_init_main_conf(ngx_conf_t *cf, void *conf)
         }
     }
 
+    ngx_dyups_del_upstream_next_filter = ngx_dyups_del_upstream_top_filter;
+    ngx_dyups_del_upstream_top_filter = ngx_dyups_del_upstream_check_filter;
+
     return ngx_http_upstream_check_init_shm(cf, conf);
 }
 
@@ -3594,7 +4139,7 @@ ngx_http_upstream_check_create_srv_conf(ngx_conf_t *cf)
     ucscf->fall_count = NGX_CONF_UNSET_UINT;
     ucscf->rise_count = NGX_CONF_UNSET_UINT;
     ucscf->check_timeout = NGX_CONF_UNSET_MSEC;
-    ucscf->check_keepalive_requests = NGX_CONF_UNSET_UINT;
+    ucscf->check_keepalive_requests = 1;
     ucscf->check_type_conf = NGX_CONF_UNSET_PTR;
 
     return ucscf;
@@ -3722,36 +4267,30 @@ ngx_http_upstream_check_init_shm(ngx_conf_t *cf, void *conf)
     ngx_shm_zone_t                       *shm_zone;
     ngx_http_upstream_check_main_conf_t  *ucmcf = conf;
 
-    if (ucmcf->peers->peers.nelts > 0) {
-
-        ngx_http_upstream_check_shm_generation++;
+    ngx_http_upstream_check_shm_generation++;
 
-        shm_name = &ucmcf->peers->check_shm_name;
+    shm_name = &ucmcf->peers->check_shm_name;
 
-        ngx_http_upstream_check_get_shm_name(shm_name, cf->pool,
-                                    ngx_http_upstream_check_shm_generation);
+    ngx_http_upstream_check_get_shm_name(shm_name, cf->pool,
+                                ngx_http_upstream_check_shm_generation);
 
-        /* The default check shared memory size is 1M */
-        shm_size = 1 * 1024 * 1024;
+    /* The default check shared memory size is 1M */
+    shm_size = 1 * 1024 * 1024;
 
-        shm_size = shm_size < ucmcf->check_shm_size ?
-                              ucmcf->check_shm_size : shm_size;
+    shm_size = shm_size < ucmcf->check_shm_size ?
+                          ucmcf->check_shm_size : shm_size;
 
-        shm_zone = ngx_shared_memory_add(cf, shm_name, shm_size,
-                                         &ngx_http_upstream_check_module);
+    shm_zone = ngx_shared_memory_add(cf, shm_name, shm_size,
+                                     &ngx_http_upstream_check_module);
 
-        ngx_log_debug2(NGX_LOG_DEBUG_HTTP, cf->log, 0,
-                       "http upstream check, upsteam:%V, shm_zone size:%ui",
-                       shm_name, shm_size);
+    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, cf->log, 0,
+                   "http upstream check, upsteam:%V, shm_zone size:%ui",
+                   shm_name, shm_size);
 
-        shm_zone->data = cf->pool;
-        check_peers_ctx = ucmcf->peers;
+    shm_zone->data = cf->pool;
+    check_peers_ctx = ucmcf->peers;
 
-        shm_zone->init = ngx_http_upstream_check_init_shm_zone;
-    }
-    else {
-         check_peers_ctx = NULL;
-    }
+    shm_zone->init = ngx_http_upstream_check_init_shm_zone;
 
     return NGX_CONF_OK;
 }
@@ -3795,7 +4334,7 @@ ngx_http_upstream_check_init_shm_zone(ngx_shm_zone_t *shm_zone, void *data)
 
     opeers_shm = NULL;
     peers_shm = NULL;
-    ngx_str_null(&oshm_name);
+    ngx_str_set(&oshm_name, "");
 
     same = 0;
     peers = check_peers_ctx;
@@ -3804,9 +4343,6 @@ ngx_http_upstream_check_init_shm_zone(ngx_shm_zone_t *shm_zone, void *data)
     }
 
     number = peers->peers.nelts;
-    if (number == 0) {
-        return NGX_OK;
-    }
 
     pool = shm_zone->data;
     if (pool == NULL) {
@@ -3849,7 +4385,7 @@ ngx_http_upstream_check_init_shm_zone(ngx_shm_zone_t *shm_zone, void *data)
         }
 
         size = sizeof(*peers_shm) +
-               (number - 1) * sizeof(ngx_http_upstream_check_peer_shm_t);
+               (number - 1 + MAX_DYNAMIC_PEER) * sizeof(ngx_http_upstream_check_peer_shm_t);
 
         peers_shm = ngx_slab_alloc(shpool, size);
 
@@ -3863,6 +4399,7 @@ ngx_http_upstream_check_init_shm_zone(ngx_shm_zone_t *shm_zone, void *data)
     peers_shm->generation = ngx_http_upstream_check_shm_generation;
     peers_shm->checksum = peers->checksum;
     peers_shm->number = number;
+    peers_shm->max_number = number + MAX_DYNAMIC_PEER;
 
     peer = peers->peers.elts;
 
@@ -3870,13 +4407,6 @@ ngx_http_upstream_check_init_shm_zone(ngx_shm_zone_t *shm_zone, void *data)
 
         peer_shm = &peers_shm->peers[i];
 
-        /*
-         * This function may be triggered before the old stale
-         * work process exits. The owner may stick to the old
-         * pid.
-         */
-        peer_shm->owner = NGX_INVALID_PID;
-
         if (same) {
             continue;
         }
@@ -3918,6 +4448,7 @@ ngx_http_upstream_check_init_shm_zone(ngx_shm_zone_t *shm_zone, void *data)
         }
     }
 
+    peers->shpool = shpool;
     peers->peers_shm = peers_shm;
     shm_zone->data = peers_shm;
 
@@ -3956,7 +4487,8 @@ ngx_shared_memory_find(ngx_cycle_t *cycle, ngx_str_t *name, void *tag)
             continue;
         }
 
-        if (ngx_strncmp(name->data, shm_zone[i].shm.name.data, name->len) != 0)
+        if (ngx_strncmp(name->data, shm_zone[i].shm.name.data, name->len)
+                != 0)
         {
             continue;
         }
@@ -4024,6 +4557,8 @@ ngx_http_upstream_check_init_shm_peer(ngx_http_upstream_check_peer_shm_t *psh,
         psh->down         = init_down;
     }
 
+    psh->owner = NGX_INVALID_PID;
+
 #if (NGX_HAVE_ATOMIC_OPS)
 
     file = NULL;
@@ -4056,3 +4587,22 @@ ngx_http_upstream_check_init_process(ngx_cycle_t *cycle)
 {
     return ngx_http_upstream_check_add_timers(cycle);
 }
+
+
+static ngx_int_t
+ngx_dyups_del_upstream_check_filter(
+    ngx_http_upstream_main_conf_t *umcf, ngx_http_upstream_srv_conf_t *uscf)
+{
+    ngx_uint_t                  i;
+    ngx_http_upstream_server_t  *us;
+
+    us = uscf->servers->elts;
+    for (i = 0; i < uscf->servers->nelts; i++) {
+        if (us[i].addrs) {
+            ngx_http_upstream_check_delete_dynamic_peer(&uscf->host,
+                                                        us[i].addrs);
+        }
+    }
+
+    return ngx_dyups_del_upstream_next_filter(umcf, uscf);
+}
