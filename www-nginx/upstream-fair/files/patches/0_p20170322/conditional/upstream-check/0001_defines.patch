From 31f66226cd8d999ea621d53840f79d2cc8505e50 Mon Sep 17 00:00:00 2001
From: Jay Caines-Gooby <jay@gooby.org>
Date: Mon, 9 Oct 2017 21:24:58 +0700
Subject: This patch is reworked from following commits:
 - https://github.com/itoffshore/nginx-upstream-fair/commit/31f66226cd8d999ea621d53840f79d2cc8505e50
 - https://github.com/itoffshore/nginx-upstream-fair/commit/3df8e6b9d3524ad72c73d5c9b2805da65c9e68ff
 
 It adds some kind of support for upstream-check module.

---
 ngx_http_upstream_fair_module.c | 32 +++
 1 file changed, 32 insertions(+)

diff --git a/ngx_http_upstream_fair_module.c b/ngx_http_upstream_fair_module.c
index a078fd1..acb1642 100644
--- a/ngx_http_upstream_fair_module.c
+++ b/ngx_http_upstream_fair_module.c
@@ -8,6 +8,7 @@
 #include <ngx_config.h>
 #include <ngx_core.h>
 #include <ngx_http.h>
+#include "ngx_http_upstream_check_module.h"
 
 typedef struct {
     ngx_uint_t                          nreq;
@@ -42,6 +42,8 @@ typedef struct {
     ngx_uint_t                          max_fails;
     time_t                              fail_timeout;
 
+    ngx_uint_t                          check_index;
+
     time_t                              accessed;
     ngx_uint_t                          down:1;
 
@@ -474,6 +478,14 @@ ngx_http_upstream_init_fair_rr(ngx_conf_t *cf, ngx_http_upstream_srv_conf_t *us)
                 peers->peer[n].fail_timeout = server[i].fail_timeout;
                 peers->peer[n].down = server[i].down;
                 peers->peer[n].weight = server[i].down ? 0 : server[i].weight;
+
+                if (!server[i].down) {
+                    peers->peer[n].check_index =
+                        ngx_http_upstream_check_add_peer(cf, us, &server[i].addrs[j]);
+                } else {
+                    peers->peer[n].check_index = (ngx_uint_t) NGX_ERROR;
+                }
+
                 n++;
             }
         }
@@ -524,6 +538,14 @@ ngx_http_upstream_init_fair_rr(ngx_conf_t *cf, ngx_http_upstream_srv_conf_t *us)
                 backup->peer[n].max_fails = server[i].max_fails;
                 backup->peer[n].fail_timeout = server[i].fail_timeout;
                 backup->peer[n].down = server[i].down;
+
+                if (!server[i].down) {
+                    backup->peer[n].check_index =
+                        ngx_http_upstream_check_add_peer(cf, us, &server[i].addrs[j]);
+                } else {
+                    backup->peer[n].check_index = (ngx_uint_t) NGX_ERROR;
+                }
+
                 n++;
             }
         }
@@ -580,6 +604,9 @@ ngx_http_upstream_init_fair_rr(ngx_conf_t *cf, ngx_http_upstream_srv_conf_t *us)
         peers->peer[i].weight = 1;
         peers->peer[i].max_fails = 1;
         peers->peer[i].fail_timeout = 10;
+
+        peers->peer[i].check_index = (ngx_uint_t) NGX_ERROR;
+
     }
 
     us->peer.data = peers;
@@ -723,6 +752,13 @@ ngx_http_upstream_fair_try_peer(ngx_peer_connection_t *pc,
     peer = &fp->peers->peer[peer_id];
 
     if (!peer->down) {
+
+        ngx_log_debug1(NGX_LOG_DEBUG_HTTP, pc->log, 0,
+                       "[upstream_fair] get fair peer, check_index: %ui",
+                       peer->check_index);
+
+        if (!ngx_http_upstream_check_peer_down(peer->check_index)) {
+
         if (peer->max_fails == 0 || peer->shared->fails < peer->max_fails) {
             return NGX_OK;
         }
@@ -733,6 +771,9 @@ ngx_http_upstream_fair_try_peer(ngx_peer_connection_t *pc,
             peer->shared->fails = 0;
             return NGX_OK;
         }
+
+        }
+
     }
 
     return NGX_BUSY;
